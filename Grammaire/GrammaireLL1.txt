r0 : fichier ::= with Ada.Text_I0 ; use Ada.Text_I0 ; procedure ident is DECL* begin instr INSTR* end IDENT? EOF

r1 : DECL* ::= ''
r2 : DECL* ::= decl DECL*
r3 : INSTR* ::= ''
r4 : INSTR* ::= instr INSTR*
r5 : IDENT? ::= ;
r6 : IDENT? ::= ident ; 

r7 : decl ::= type ident A1
r8 : decl ::= ident IDENT,* : TYPE EXPR?:=
r9 : decl ::= procedure ident PARAMS? is DECL* begin instr INSTR* end IDENT?
r10 : decl ::= function ident PARAMS? return TYPE is DECL* begin instr INSTR* end IDENT?

r11 : A1 ::= ;
r12 : A1 ::= is B1

r13 : B1 ::= access ident ;
r14 : B1 ::= record champs CHAMPS* end record ;

r15 : CHAMPS* ::= ''
r16 : CHAMPS* ::= champs CHAMPS*
r17 : IDENT,* ::= , ident IDENT,*
r18 : IDENT,* ::= ''
r19 : EXPR?:= ::= ;
r20 : EXPR?:= ::= := expr ;
r21 : PARAMS? ::= params
r22 : PARAMS? ::= ''

r23 : champs ::= ident IDENT,* : TYPE ;

r24 : TYPE ::= ident
r25 : TYPE ::= access ident

r26 : params ::= ( param PARAM;* )

r27 : PARAM;* ::= ''
r28 : PARAM;* ::= ; param PARAM;*

r29 : param ::= ident IDENT,* : MODE? TYPE

r30 : MODE? ::= ''
r31 : MODE? ::= mode

r32 : mode ::= in C1

r33 : C1 ::= ''
r34 : C1 ::= out

r35 : expr ::= exprOperateur

r36 : exprOperateur ::= exprAnd EXPROPERATEUR

r37 : EXPROPERATEUR ::= or D1
r38 : EXPROPERATEUR ::= ''

r39 : D1 ::= exprAnd EXPROPERATEUR
r40 : D1 ::= else exprAnd EXPROPERATEUR

r41 : exprAnd ::= exprNot EXPRAND

r42 : EXPRAND ::= and E1
r43 : EXPRAND ::= ''

r44 : E1 ::= exprNot EXPRAND
r45 : E1 ::= then exprNot EXPRAND

r46 : exprNot ::= exprEgal
r47 : exprNot ::= not exprNot

r48 : exprEgal ::= exprComparaison EXPREGAL

r49 : EXPREGAL ::= = exprComparaison EXPREGAL
r50 : EXPREGAL ::= /= exprComparaison EXPREGAL
r51 : EXPREGAL ::= ''

r52 : exprComparaison ::= exprSomme EXPRCOMPARAISON

r53 : EXPRCOMPARAISON ::= > exprSomme EXPRCOMPARAISON
r54 : EXPRCOMPARAISON ::= >= exprSomme EXPRCOMPARAISON
r55 : EXPRCOMPARAISON ::= < exprSomme EXPRCOMPARAISON
r56 : EXPRCOMPARAISON ::= <= exprSomme EXPRCOMPARAISON
r57 : EXPRCOMPARAISON ::= ''

r58 : exprSomme ::= exprMult EXPRSOMME

r59 : EXPRSOMME ::= + exprMult EXPRSOMME
r60 : EXPRSOMME ::= - exprMult EXPRSOMME
r61 : EXPRSOMME ::= ''

r62 : exprMult ::= exprUnaire EXPRMULT

r63 : EXPRMULT ::= * exprUnaire EXPRMULT
r64 : EXPRMULT ::= / exprUnaire EXPRMULT
r65 : EXPRMULT ::= rem exprUnaire EXPRMULT
r66 : EXPRMULT ::= ''

r67 : exprUnaire ::= exprTerm1
r68 : exprUnaire ::= exprTerm2
r69 : exprUnaire ::= - exprUnaire

r70 : exprTerm1 ::= entier EXPRTERM
r71 : exprTerm1 ::= caractère EXPRTERM
r72 : exprTerm1 ::= true EXPRTERM
r73 : exprTerm1 ::= false EXPRTERM
r74 : exprTerm1 ::= null EXPRTERM
r75 : exprTerm1 ::= (expr) EXPRTERM
r76 : exprTerm2 ::= ident G1
r77 : exprTerm1 ::= new ident EXPRTERM
r78 : exprTerm1 ::= character'val ( expr ) EXPRTERM

r79 : exprTerm3 ::= entier EXPRTERM2
r80 : exprTerm3 ::= caractère EXPRTERM2
r81 : exprTerm3 ::= true EXPRTERM2
r82 : exprTerm3 ::= false EXPRTERM2
r83 : exprTerm3 ::= null EXPRTERM2
r84 : exprTerm3 ::= (expr) EXPRTERM2
r85 : exprTerm3 ::= new ident EXPRTERM2
r86 : exprTerm3 ::= character'val ( expr ) EXPRTERM2

r87 : G1 ::= EXPRTERM
r88 : G1 ::= ( expr EXPR,* ) EXPRTERM


r89 : EXPRTERM ::= . ident EXPRTERM
r90 : EXPRTERM ::= ''

r91 : EXPRTERM2 ::= . ident EXPRTERM

r92 : EXPR,* ::= ''
r93 : EXPR,* ::= , expr EXPR,*

r94 : instr ::= ident H1
r95 : instr ::= exprTerm3 := expr ;
r96 : instr ::= return EXPR? ;
r97 : instr ::= begin instr INSTR* end ;
r98 : instr ::= if expr then instr INSTR* ELSIF ELSE end if ;
r99 : instr ::= for ident in reverse? expr .. expr loop instr INSTR* end loop ;
r100 : instr ::= while expr loop instr INSTR* end loop ;

r101 : H1 ::= := expr ;
r102 : H1 ::= ;
r103 : H1 ::= ( expr EXPR,* ) I1
r104 : H1 ::= EXPRTERM2 := expr ; 

r105 : I1 ::= ;
r106 : I1 ::= EXPRTERM2 := expr ;

r107 : EXPR? ::= ''
r108 : EXPR? ::= expr
r109 : ELSIF ::= ''
r110 : ELSIF ::= elsif expr then instr INSTR* ELSIF
r111 : ELSE ::= ''
r112 : ELSE ::= else instr INSTR*
r113 : reverse? ::= ''
r114 : reverse? ::= reverse


